Библиотека состоит из двух классов: 

Класс LMP_Device содержит базовую логику обработки пакетов протокола информационного обмена ГКВ. 

Класс GKV_Device наследует LMP_Device и представляет собой описание работы с serial-интерфейсом для Linux и Windows с использованием стандартных библиотек.

-----------------------------------------
public-методы класса LMP_Device:
-----------------------------------------

-----------------------------------------
void RunDevice(); - запускает работу приема данных с модуля в отдельном потоке.
-----------------------------------------

-----------------------------------------
uint8_t Receive_Process(); - запускает работу приема данных с модуля в текущем потоке. 
Возвращает состояние приема пакета, возвращает 0, если в приемном буфере нет преамбулы, 1 - если в приемном буфере была обнаружена преамбула, но не сошлась контрольная сумма, 2 - если принят корректный пакет.
-----------------------------------------

-----------------------------------------
void StartWriteBinaryData(); - запускает запись принимаемых данных в бинарный файл Log_Data_{дата-время начала записи} в отдельном потоке. Запись идет порциями по 34 кБ.
-----------------------------------------

-----------------------------------------
void StopWriteBinaryData(); - останавливает запись данных в бинарный файл
-----------------------------------------

-----------------------------------------
void SetAlgorithm(uint8_t algorithm_register_value); - устанавливает на устройстве алгоритм обработки данных. Принимает следующие входные значения:

 - GKV_ADC_CODES_ALGORITHM = 0x00
 - GKV_SENSORS_DATA_ALGORITHM = 0x01
 - GKV_ORIENTATION_KALMAN_ALGORITHM = 0x02
 - GKV_INCLINOMETER_ALGORITHM = 0x04
 - GKV_ORIENTATION_MAHONY_ALGORITHM = 0x05
 - GKV_BINS_NAVIGATON_ALGORITHM = 0x06
 - GKV_CUSTOM_ALGORITHM = 0x07
 - GKV_KALMAN_GNSS_NAVIGATON_ALGORITHM = 0x08
 - GKV_ESKF5_NAVIGATON_ALGORITHM = 0x09
 -----------------------------------------

-----------------------------------------
void SetBaudrate(uint8_t baudrate_register_value); - устанавливает на устройстве битрейт основного интерфейса. Принимает следующие входные значения:

 - GKV_BAUDRATE_921600 = 0x00
 - GKV_BAUDRATE_460800 = 0x01
 - GKV_BAUDRATE_230400 = 0x02
 - GKV_BAUDRATE_115200 = 0x03
 - GKV_BAUDRATE_1000000 = 0x04
 - GKV_BAUDRATE_2000000 = 0x05
 - GKV_BAUDRATE_3000000 = 0x06
-----------------------------------------

-----------------------------------------
void SetDefaultAlgorithmPacket(); - устанавливает на выдачу из устройства стандартный пакет данных для заданного алгоритма.
-----------------------------------------

-----------------------------------------
void SetCustomAlgorithmPacket(); - устанавливает на выдачу из устройства наборный пакет данных с выбранными параметрами из списка в LMP_CustomPacket.h
-----------------------------------------

-----------------------------------------
void SetCustomPacketParam(uint8_t* param_array_ptr, uint8_t quantity_of_params); - устанавливает параметры наборного пакета, которые должно выдавать устройство.
Принимает указатель на массив uint8_t таких параметров и их количество. 

ВНИМАНИЕ: функция не имеет защиты от записи некорректных параметров наборного пакета!
-----------------------------------------

-----------------------------------------
void SetSettingsReceivedCallback(std::function<void(GKV_Settings *)> ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый из принятых пакетов.

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом потоке и при большом времени работы может повлиять на прием данных. 
-----------------------------------------

